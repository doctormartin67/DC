#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "libraryheader.h"

char *trim(char *s) {
  char *t;
  t = s;
  while (*s == ' ' || *s == '\t' || *s == '\n' || *s == '\r'){
    t = ++s;
  }
  while (*s != ' ' && *s != '\t' && *s != '\n' && *s != '\r'){
    s++;
  }
  *s = '\0';
  return t;
}

// create a zip file of an excel document and extract
void createXLzip(char *s) {
  char *t;
  char *end;
  char command[BUFSIZ];
  t = replace(s, " ", "\\ ");
  s = replace(s, " ", "\\ ");
  end = strstr(t, ".xls");
  *end = '\0';
  
  snprintf(command, sizeof command, "%s%s%s%s%s", "cp ", s, " ", t, ".zip");
  system(command);
}

// replace all occurences of string oldW with newW in s
char *replace(const char *s, const char *oldW, 
                  const char *newW) 
{ 
    char *result; 
    int i, cnt = 0; 
    int newWlen = strlen(newW); 
    int oldWlen = strlen(oldW); 
  
    // Counting the number of times old word 
    // occur in the string 
    for (i = 0; s[i] != '\0'; i++) { 
        if (strstr(&s[i], oldW) == &s[i]) { 
            cnt++; 
  
            // Jumping to index after the old word. 
            i += oldWlen - 1; 
        } 
    } 
  
    // Making new string of enough length 
    result = (char *) malloc(i + cnt * (newWlen - oldWlen) + 1); 
  
    i = 0; 
    while (*s) { 
        // compare the substring with the result 
        if (strstr(s, oldW) == s) { 
            strcpy(&result[i], newW); 
            i += newWlen; 
            s += oldWlen; 
        } 
        else
            result[i++] = *s++; 
    } 
  
    result[i] = '\0'; 
    return result; 
} 
